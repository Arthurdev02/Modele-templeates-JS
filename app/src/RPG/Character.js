// La classe üòé
class Character {
    // D√©claration de propri√©t√©s statiques
    static counter = 0;

    // D√©claration de propri√©t√©s publiques
    nickname;
    hp;
    armor;
    luck;

    // D√©claration d'une m√©thode statique
    static getCounter() {
        // Dans une m√©thode statique, "this" √©quivaut au "self" de PHP
        // Dans le contexte statique, this repr√©sente la classe
        // return this.counter;
        // On peut aussi utiliser ce type d'appel qui est identique √† celui du contexte non-statique
        // Pour des raisons de lisibilit√©, on va privil√©gier cette forme
        return Character.counter;
    }

    // Constructeur
    constructor( jsonCharacter ) {
        // Dans le contexte non-statique, this repr√©sente l'instance actuelle
        // Appel d'une propri√©t√© statique dans un contexte non statique
        Character.counter ++;

        // Design pattern "Hydrator" comme vu en PHP
        let jsonProps = Object.getOwnPropertyNames( jsonCharacter );
        let validProps = jsonProps.filter( p => this.hasOwnProperty(p) );

        for( let prop of validProps ) {
            this[prop] = jsonCharacter[prop];
        }
    }

    // D√©claration de m√©thode publique
    walk() {
        console.log( 'Je marche' );
    }

    // M√©thode "magique" qui indique ce que renvoie l'objet lorsque tente de le convertir en string
    toString() {
        return this.nickname;
    }

    // M√©thode "magique" qui indique ce que renvoie l'objet lorsque tente de le convertir en nombre
    valueOf() {
        return this.hp;
    }
}